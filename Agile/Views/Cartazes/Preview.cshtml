@model Domain.DTOs.PreviewData
@{
    ViewData["Title"] = "Pr√©-visualiza√ß√£o dos Cartazes";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/preview.css" asp-append-version="true" />
}

<div class="preview-main-container">
    <!-- Header com estat√≠sticas -->
    <div class="preview-header">
        <h1 class="preview-title">
            <img src="~/images/icon-pre-vizuali.png" alt="Pr√©-visualiza√ß√£o" class="me-2" style="width: 30px; height: 30px;">
            Pr√©-visualiza√ß√£o dos Cartazes
        </h1>
        <div class="stats-grid">
            <div class="stat-card">
                <span class="stat-number">@Model.TotalProdutos</span>
                <span class="stat-label">Produtos</span>
            </div>
            <div class="stat-card">
                <span class="stat-number">@Model.TotalFamilias</span>
                <span class="stat-label">Fam√≠lias</span>
            </div>
            <div class="stat-card">
                <span class="stat-number">@Model.TotalCartazes</span>
                <span class="stat-label">Cartazes</span>
            </div>
            <div class="stat-card">
                <span class="stat-number">@Model.TamanhoSelecionado</span>
                <span class="stat-label">Tamanho</span>
            </div>
        </div>
    </div>

    <!-- Layout em duas colunas -->
    <div class="preview-content-grid">
        <!-- Coluna da Esquerda - PDF Preview -->
        <div class="pdf-preview-section">
            <div class="pdf-header">
                <h3>
                    <img src="~/images/icon-pdfBranco.png" alt="PDF" class="me-2" style="width: 24px; height: 24px;">
                    Pr√©-visualiza√ß√£o Real do PDF
                </h3>
                <button type="button" class="btn-personalize" onclick="personalizarLayout()">
                    <img src="~/images/icon-personalizar.png" alt="Personalizar" class="me-2" style="width: 20px; height: 20px;">Personalizar Layout
                </button>
            </div>
            <div class="pdf-viewer-container">
                <div id="pdf-loading" class="pdf-loading">
                    <div class="spinner"></div>
                    <div>Gerando pr√©via do PDF...</div>
                </div>
                <iframe id="pdf-viewer" class="pdf-viewer" style="display: none;" src=""></iframe>
                    <div class="pdf-controls">
                        <button class="pdf-control-btn" onclick="gerarPreviewPdf()" id="btn-gerar-preview">
                            <img src="~/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Gerar Pr√©via
                        </button>
                        <button class="pdf-control-btn" onclick="atualizarPreview()" id="btn-atualizar-preview" style="background: linear-gradient(135deg, #28a745, #20c997);">
                            <img src="~/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Aplicar Altera√ß√µes
                        </button>
                    </div>
            </div>
        </div>

        <!-- Coluna da Direita - Cards de Edi√ß√£o -->
        <div class="edit-section">
            <h3>
                <img src="~/images/icon-correcoesApree.png" alt="Editar" class="me-2" style="width: 24px; height: 24px;">
                Editar Cartazes e Aprender
            </h3>
            <form id="editForm" method="post" action="@Url.Action("AtualizarPreview", "Csv")">
                @if (Model.Ofertas.Count == 0)
                {
                    <div class="no-items-message">
                        <div class="text-center p-4">
                            <h4>üìã Nenhum item encontrado</h4>
                            <p class="text-muted">Todos os itens foram exclu√≠dos. Fa√ßa upload de um novo CSV para continuar.</p>
                            <a href="@Url.Action("UploadCsv", "Csv")" class="btn btn-primary">
                                üì§ Fazer Novo Upload
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    @for (int i = 0; i < Model.Ofertas.Count; i++)
                    {
                        <div class="oferta-edit-item" data-index="@i" data-id="@Model.Ofertas[i].Id">
                            <input type="hidden" name="ofertas[@i].Id" value="@Model.Ofertas[i].Id" />
                            <input type="hidden" name="ofertas[@i].IsFamilia" value="@Model.Ofertas[i].IsFamilia" />
                            <input type="hidden" name="ofertas[@i].QuantidadeProdutos" value="@Model.Ofertas[i].QuantidadeProdutos" />
                            
                            <div class="oferta-header">
                                <span class="oferta-index">#@(i + 1)</span>
                                @if (Model.Ofertas[i].IsFamilia)
                                {
                                    <span class="familia-badge">üë• Fam√≠lia (@Model.Ofertas[i].QuantidadeProdutos itens)</span>
                                }
                                <button type="button" class="btn-delete" onclick="excluirItem(@Model.Ofertas[i].Id)" title="Excluir item">
                                    <img src="~/images/icon-lixeira.png" alt="Excluir" style="width: 16px; height: 16px;">
                                </button>
                            </div>
                            
                            <div class="form-group">
                                <label>Nome do Produto:</label>
                                <input type="text" name="ofertas[@i].NomeBase" value="@Model.Ofertas[i].NomeBase" 
                                       class="form-control" placeholder="Ex: ARROZ ANC√âLI" />
                            </div>
                            
                            <div class="form-group">
                                <label>Gramagem:</label>
                                <input type="text" name="ofertas[@i].Gramagem" value="@Model.Ofertas[i].Gramagem" 
                                       class="form-control" placeholder="Ex: 5KG" />
                            </div>
                            
                            <div class="form-group">
                                <label>Variedade:</label>
                                <input type="text" name="ofertas[@i].Variedade" value="@Model.Ofertas[i].Variedade" 
                                       class="form-control" placeholder="Ex: INTEGRAL" />
                            </div>
                            
                            <div class="form-group">
                                <label>Pre√ßo (R$):</label>
                                <input type="text" name="ofertas[@i].PrecoString" value="@Model.Ofertas[i].Preco.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)" 
                                       class="form-control" placeholder="Ex: 25.99" />
                            </div>
                            
                            @if (Model.Ofertas[i].IsFamilia && Model.Ofertas[i].ProdutosOriginais.Any())
                            {
                                <div class="produtos-originais">
                                    <small class="text-muted">
                                        <strong>Produtos originais:</strong><br/>
                                        @string.Join("<br/>", Model.Ofertas[i].ProdutosOriginais.Select(p => $"‚Ä¢ {p.DescricaoOriginal}"))
                                    </small>
                                </div>
                            }
                        </div>
                    }
                }
            </form>
        </div>
    </div>

    <!-- Bot√µes de A√ß√£o -->
    <div class="action-buttons">
        <a href="@Url.Action("UploadCsv", "Csv")" class="btn-outline-modern">
            <img src="~/images/icon-voltar.png" alt="Voltar" class="me-2" style="width: 16px; height: 16px;">Voltar
        </a>
    </div>
</div>

@section Scripts {
    <!-- PDF.js Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    
    <script>
        let pdfUrl = '';
        let currentPdf = null;
        
        // Configurar PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
        
        function gerarPreviewPdf() {
            const loading = document.getElementById('pdf-loading');
            const viewer = document.getElementById('pdf-viewer');
            const btnGerar = document.getElementById('btn-gerar-preview');
            
            // Mostrar loading
            loading.style.display = 'flex';
            viewer.style.display = 'none';
            btnGerar.disabled = true;
            btnGerar.innerHTML = '<img src="/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Gerando...';
            
            // Gerar PDF tempor√°rio para preview
            const requestData = {
                ofertas: @Html.Raw(Json.Serialize(Model.Ofertas)),
                fundoSelecionado: '@Model.FundoSelecionado',
                tamanhoSelecionado: '@Model.TamanhoSelecionado',
                configuracoes: null // For√ßa o backend a carregar da sess√£o
            };
            
            console.log('Preview: Enviando dados para preview:', requestData);
            console.log('Preview: Configura√ß√µes enviadas como null - backend deve carregar da sess√£o');
            
            fetch('@Url.Action("GerarPreviewPdf", "Pdf")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(requestData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao gerar preview do PDF');
                }
                return response.blob();
            })
            .then(blob => {
                // Criar URL do blob
                pdfUrl = URL.createObjectURL(blob);
                
                // Mostrar PDF no iframe
                viewer.src = pdfUrl;
                viewer.style.display = 'block';
                loading.style.display = 'none';
                
                // Habilitar bot√£o
                btnGerar.disabled = false;
                btnGerar.innerHTML = '<img src="/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Gerar Pr√©via';
                
                showNotification('Preview do PDF gerado com sucesso!', 'success');
            })
            .catch(error => {
                console.error('Erro:', error);
                loading.innerHTML = `
                    <div style="color: #dc3545; text-align: center;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">‚ùå</div>
                        <div>Erro ao gerar preview: ${error.message}</div>
                        <button onclick="gerarPreviewPdf()" style="margin-top: 1rem; padding: 8px 16px; background: #f5c518; border: none; border-radius: 5px; cursor: pointer;">
                            Tentar Novamente
                        </button>
                    </div>
                `;
                btnGerar.disabled = false;
                btnGerar.innerHTML = '<img src="/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Gerar Pr√©via';
                showNotification('Erro ao gerar preview: ' + error.message, 'error');
            });
        }
        
        

        function personalizarLayout() {
            // Redireciona para a p√°gina de personaliza√ß√£o
            window.location.href = '@Url.Action("PersonalizarLayout", "Cartazes")';
        }

        function showNotification(message, type) {
            // Cria uma notifica√ß√£o simples
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 5px;
                color: white;
                font-weight: bold;
                z-index: 9999;
                animation: slideIn 0.3s ease;
            `;
            
            if (type === 'success') notification.style.backgroundColor = '#28a745';
            else if (type === 'error') notification.style.backgroundColor = '#dc3545';
            else if (type === 'info') notification.style.backgroundColor = '#17a2b8';
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        
        function atualizarPreview() {
            console.log('üîÑ Atualizando preview ap√≥s edi√ß√£o...');
            console.log(`Corre√ß√µes pendentes antes: ${correcoesPendentes.size}`);
            
            // Limpar indicador de altera√ß√µes pendentes
            alteracoesPendentes = false;
            atualizarIndicadorAlteracoes();
            
            // Usar a mesma fun√ß√£o de gerar preview para manter consist√™ncia
            gerarPreviewPdf();
        }

        function excluirItem(itemId) {
            if (!confirm('Tem certeza que deseja excluir este item?')) {
                return;
            }

            const loading = document.getElementById('pdf-loading');
            const viewer = document.getElementById('pdf-viewer');
            loading.style.display = 'flex';
            viewer.style.display = 'none';

            fetch('@Url.Action("ExcluirItem", "Csv")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `itemId=${itemId}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao excluir item');
                }
                return response.text();
            })
            .then(html => {
                // Recarregar a p√°gina para mostrar as altera√ß√µes
                window.location.reload();
            })
            .catch(error => {
                console.error('Erro:', error);
                showNotification('Erro ao excluir item: ' + error.message, 'error');
                loading.style.display = 'none';
            });
        }

        // Auto-gerar preview ao carregar a p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                gerarPreviewPdf();
            }, 1000);
        });

        // Auto-save das altera√ß√µes - DESABILITADO para permitir edi√ß√£o de m√∫ltiplas palavras
        // let autoSaveTimeout;
        // document.addEventListener('input', function(e) {
        //     if (e.target.matches('input[type="text"]')) {
        //         clearTimeout(autoSaveTimeout);
        //         autoSaveTimeout = setTimeout(() => {
        //             // Auto-atualiza ap√≥s 2 segundos de inatividade
        //             atualizarPreview();
        //         }, 2000);
        //     }
        // });

        // Formata√ß√£o de pre√ßos
        document.addEventListener('input', function(e) {
            if (e.target.name && e.target.name.includes('PrecoString')) {
                // Remove caracteres n√£o num√©ricos exceto ponto e v√≠rgula
                let value = e.target.value.replace(/[^\d.,]/g, '');
                
                // Substitui v√≠rgula por ponto para padronizar
                value = value.replace(',', '.');
                
                // Garante que s√≥ h√° um ponto decimal
                const parts = value.split('.');
                if (parts.length > 2) {
                    value = parts[0] + '.' + parts.slice(1).join('');
                }
                
                // Limita a 2 casas decimais
                if (parts.length === 2 && parts[1].length > 2) {
                    value = parts[0] + '.' + parts[1].substring(0, 2);
                }
                
                e.target.value = value;
            }
        });
        
        // Limpar URL do blob quando sair da p√°gina
        window.addEventListener('beforeunload', function() {
            if (pdfUrl) {
                URL.revokeObjectURL(pdfUrl);
            }
        });

        // Sistema de aprendizado - registrar corre√ß√µes quando o usu√°rio edita
        let correcoesPendentes = new Map(); // Armazena corre√ß√µes pendentes
        let alteracoesPendentes = false; // Flag para indicar se h√° altera√ß√µes pendentes

        // Inicializar valores originais quando a p√°gina carrega
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('input[type="text"]').forEach(inp => {
                // Mostrar literalmente se h√° \n no valor
                if (inp.value.includes('\n')) {
                    console.log(`‚ö†Ô∏è Campo ${inp.name} cont√©m quebra de linha: '${inp.value}'`);
                    console.log(`Valor escapado: ${JSON.stringify(inp.value)}`);
                }
                inp.dataset.originalValue = inp.value || '';
                console.log(`Valor original inicial para ${inp.name}: '${inp.value}'`);
            });
        });

        // Capturar valor original quando o campo recebe foco
        document.addEventListener('focusin', function(e) {
            if (e.target.matches('input[type="text"]')) {
                if (!e.target.dataset.originalValue) {
                    e.target.dataset.originalValue = e.target.value || '';
                    console.log(`Valor original capturado no focus: '${e.target.value}'`);
                }
            }
        });

        // Capturar mudan√ßas nos campos de edi√ß√£o (quando o usu√°rio termina de editar)
        ['blur', 'change'].forEach(eventType => {
            document.addEventListener(eventType, function(e) {
            if (e.target.matches('input[type="text"]')) {
                const fieldName = e.target.name;
                const newValue = e.target.value;
                
                console.log(`=== CAMPO EDITADO ===`);
                console.log(`Campo: ${fieldName}`);
                console.log(`Valor atual: '${newValue}'`);
                console.log(`Valor original armazenado: '${e.target.dataset.originalValue}'`);
                
                // Marcar que h√° altera√ß√µes pendentes
                alteracoesPendentes = true;
                atualizarIndicadorAlteracoes();
                
                // Verificar se √© um campo que pode ter corre√ß√µes (corrigido para detectar os nomes corretos)
                if (fieldName && (fieldName.includes('NomeBase') || fieldName.includes('Gramagem') || fieldName.includes('Variedade'))) {
                    const originalValue = e.target.dataset.originalValue || '';
                    console.log(`Comparando: Original='${originalValue}' vs Novo='${newValue}'`);
                    
                    // Se o valor mudou significativamente, registrar corre√ß√£o
                    if (originalValue !== newValue && newValue.trim().length > 0) {
                        const tipoCorrecao = fieldName.includes('NomeBase') ? 'NOME' : 
                                           fieldName.includes('Gramagem') ? 'GRAMAGEM' : 
                                           fieldName.includes('Variedade') ? 'VARIEDADE' : 'NOME';
                        
                        // Armazenar corre√ß√£o pendente
                        const correcaoKey = `${tipoCorrecao}_${originalValue}`;
                        correcoesPendentes.set(correcaoKey, {
                            textoOriginal: originalValue,
                            textoCorrigido: newValue,
                            tipoCorrecao: tipoCorrecao
                        });
                        
                        console.log(`‚úÖ Corre√ß√£o pendente registrada: ${tipoCorrecao} - '${originalValue}' -> '${newValue}'`);
                        console.log(`Total de corre√ß√µes pendentes: ${correcoesPendentes.size}`);
                        
                        // Atualizar o valor original para futuras edi√ß√µes
                        e.target.dataset.originalValue = newValue;
                    } else {
                        console.log(`‚ùå Corre√ß√£o n√£o registrada: valores iguais ou vazios`);
                    }
                } else {
                    console.log(`‚ùå Campo n√£o √© eleg√≠vel para corre√ß√µes: ${fieldName}`);
                }
            }
        });
        });

        // Fun√ß√£o para atualizar indicador de altera√ß√µes pendentes
        function atualizarIndicadorAlteracoes() {
            const btnAtualizar = document.getElementById('btn-atualizar-preview');
            if (alteracoesPendentes) {
                btnAtualizar.style.background = 'linear-gradient(135deg, #ffc107, #fd7e14)';
                btnAtualizar.innerHTML = '<img src="/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Aplicar Altera√ß√µes ‚ö†Ô∏è';
                btnAtualizar.style.animation = 'pulse 2s infinite';
            } else {
                btnAtualizar.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
                btnAtualizar.innerHTML = '<img src="/images/icon-atualizar.png" alt="Atualizar" class="me-2" style="width: 16px; height: 16px;">Aplicar Altera√ß√µes';
                btnAtualizar.style.animation = 'none';
            }
        }

        // Fun√ß√£o para registrar corre√ß√µes pendentes
        async function registrarCorrecoesPendentes() {
            console.log(`=== REGISTRAR CORRE√á√ïES PENDENTES CHAMADA ===`);
            console.log(`Total de corre√ß√µes pendentes: ${correcoesPendentes.size}`);
            
            if (correcoesPendentes.size === 0) {
                console.log('‚ùå Nenhuma corre√ß√£o pendente para registrar');
                return;
            }
            
            console.log(`=== REGISTRANDO CORRE√á√ïES ===`);
            console.log(`Total de corre√ß√µes pendentes: ${correcoesPendentes.size}`);
            
            for (const [key, correcao] of correcoesPendentes) {
                console.log(`üì§ Enviando corre√ß√£o:`, correcao);
                
                try {
                    const response = await fetch('@Url.Action("RegistrarCorrecao", "Learning")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify(correcao)
                    });
                    
                    console.log(`üì° Resposta do servidor: ${response.status} ${response.statusText}`);
                    
                    if (response.ok) {
                        const result = await response.json();
                        console.log(`‚úÖ Corre√ß√£o registrada com sucesso: ${correcao.tipoCorrecao} - '${correcao.textoOriginal}' -> '${correcao.textoCorrigido}'`);
                        console.log('Resultado:', result);
                    } else {
                        const errorText = await response.text();
                        console.error(`‚ùå Erro ao registrar corre√ß√£o: ${response.status} - ${errorText}`);
                    }
                } catch (error) {
                    console.error(`‚ùå Erro de rede ao registrar corre√ß√£o: ${error.message}`);
                }
            }
            
            // Limpar corre√ß√µes pendentes
            correcoesPendentes.clear();
            console.log('üßπ Corre√ß√µes pendentes limpas');
        }

        // Registrar corre√ß√µes quando o usu√°rio salva ou atualiza
        document.addEventListener('submit', function(e) {
            if (e.target.id === 'editForm') {
                registrarCorrecoesPendentes();
            }
        });

        // Registrar corre√ß√µes quando o usu√°rio atualiza o preview
        const originalAtualizarPreview = atualizarPreview;
        atualizarPreview = function() {
            registrarCorrecoesPendentes().then(() => {
                originalAtualizarPreview();
            });
        };
    </script>
}
