@model Domain.DTOs.PreviewData
@{
    ViewData["Title"] = "Pr√©-visualiza√ß√£o dos Cartazes";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/preview.css" asp-append-version="true" />
}

<div class="container-fluid">
    <div class="row">
        <!-- Header com estat√≠sticas -->
        <div class="col-12">
            <div class="preview-header">
                <h2>üìã Pr√©-visualiza√ß√£o dos Cartazes</h2>
                <div class="stats-container">
                    <div class="stat-item">
                        <span class="stat-number">@Model.TotalProdutos</span>
                        <span class="stat-label">Produtos</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.TotalFamilias</span>
                        <span class="stat-label">Fam√≠lias</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.TotalCartazes</span>
                        <span class="stat-label">Cartazes</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.TamanhoSelecionado</span>
                        <span class="stat-label">Tamanho</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Preview dos Cartazes -->
        <div class="col-lg-8">
            <div class="preview-section">
                <h3>üëÅÔ∏è Visualiza√ß√£o dos Cartazes</h3>
                <div id="preview-container" class="preview-container">
                    @await Html.PartialAsync("_PreviewContainer", Model)
                </div>
            </div>
        </div>

        <!-- Painel de Edi√ß√£o -->
        <div class="col-lg-4">
            <div class="edit-section">
                <h3>‚úèÔ∏è Editar Ofertas</h3>
                <form id="editForm" method="post" action="@Url.Action("AtualizarPreview")">
                    @if (Model.Ofertas.Count == 0)
                    {
                        <div class="no-items-message">
                            <div class="text-center p-4">
                                <h4>üìã Nenhum item encontrado</h4>
                                <p class="text-muted">Todos os itens foram exclu√≠dos. Fa√ßa upload de um novo CSV para continuar.</p>
                                <a href="@Url.Action("UploadCsv")" class="btn btn-primary">
                                    üì§ Fazer Novo Upload
                                </a>
                            </div>
                        </div>
                    }
                    else
                    {
                        @for (int i = 0; i < Model.Ofertas.Count; i++)
                    {
                        <div class="oferta-edit-item" data-index="@i" data-id="@Model.Ofertas[i].Id">
                            <input type="hidden" name="ofertas[@i].Id" value="@Model.Ofertas[i].Id" />
                            <input type="hidden" name="ofertas[@i].IsFamilia" value="@Model.Ofertas[i].IsFamilia" />
                            <input type="hidden" name="ofertas[@i].QuantidadeProdutos" value="@Model.Ofertas[i].QuantidadeProdutos" />
                            
                            <div class="oferta-header">
                                <span class="oferta-index">#@(i + 1)</span>
                                @if (Model.Ofertas[i].IsFamilia)
                                {
                                    <span class="familia-badge">üë• Fam√≠lia (@Model.Ofertas[i].QuantidadeProdutos itens)</span>
                                }
                                <button type="button" class="btn-delete" onclick="excluirItem(@Model.Ofertas[i].Id)" title="Excluir item">
                                    üóëÔ∏è
                                </button>
                            </div>
                            
                            <div class="form-group">
                                <label>Nome do Produto:</label>
                                <input type="text" name="ofertas[@i].NomeBase" value="@Model.Ofertas[i].NomeBase" 
                                       class="form-control" placeholder="Ex: ARROZ ANC√âLI" />
                            </div>
                            
                            <div class="form-group">
                                <label>Gramagem:</label>
                                <input type="text" name="ofertas[@i].Gramagem" value="@Model.Ofertas[i].Gramagem" 
                                       class="form-control" placeholder="Ex: 5KG" />
                            </div>
                            
                            <div class="form-group">
                                <label>Variedade:</label>
                                <input type="text" name="ofertas[@i].Variedade" value="@Model.Ofertas[i].Variedade" 
                                       class="form-control" placeholder="Ex: INTEGRAL" />
                            </div>
                            
                            <div class="form-group">
                                <label>Pre√ßo (R$):</label>
                                <input type="text" name="ofertas[@i].PrecoString" value="@Model.Ofertas[i].Preco.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)" 
                                       class="form-control" placeholder="Ex: 25.99" />
                            </div>
                            
                            @if (Model.Ofertas[i].IsFamilia && Model.Ofertas[i].ProdutosOriginais.Any())
                            {
                                <div class="produtos-originais">
                                    <small class="text-muted">
                                        <strong>Produtos originais:</strong><br/>
                                        @string.Join("<br/>", Model.Ofertas[i].ProdutosOriginais.Select(p => $"‚Ä¢ {p.DescricaoOriginal}"))
                                    </small>
                                </div>
                            }
                        </div>
                    }
                    }
                </form>
            </div>
        </div>
    </div>

    <!-- Bot√µes de A√ß√£o -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="action-buttons">
                <button type="button" class="btn btn-warning me-2" onclick="atualizarPreview()">
                    üîÑ Atualizar Preview
                </button>
                <button type="button" class="btn btn-success me-2" onclick="gerarPdf()">
                    üìÑ Gerar PDF Final
                </button>
                <a href="@Url.Action("UploadCsv")" class="btn btn-secondary">
                    ‚Ü©Ô∏è Voltar
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function atualizarPreview() {
            const form = document.getElementById('editForm');
            const formData = new FormData(form);
            
            // Mostra loading
            const previewContainer = document.getElementById('preview-container');
            previewContainer.innerHTML = '<div class="loading">üîÑ Atualizando preview...</div>';
            
            fetch('@Url.Action("AtualizarPreview")', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao atualizar preview');
                }
                return response.text();
            })
            .then(html => {
                previewContainer.innerHTML = html;
                showNotification('Preview atualizado com sucesso!', 'success');
            })
            .catch(error => {
                previewContainer.innerHTML = '<div class="error">‚ùå Erro ao atualizar preview</div>';
                showNotification('Erro ao atualizar preview: ' + error.message, 'error');
            });
        }

        function gerarPdf() {
            // Mostra loading
            showNotification('Gerando PDF...', 'info');
            
            // Cria um form tempor√°rio para gerar o PDF
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("GerarPdfFinal")';
            form.style.display = 'none';
            
            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }

        function excluirItem(itemId) {
            // Confirma a exclus√£o
            if (!confirm('Tem certeza que deseja excluir este item?')) {
                return;
            }

            // Mostra loading
            const previewContainer = document.getElementById('preview-container');
            previewContainer.innerHTML = '<div class="loading">üóëÔ∏è Excluindo item...</div>';

            // Envia requisi√ß√£o para excluir o item
            fetch('@Url.Action("ExcluirItem")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `itemId=${itemId}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao excluir item');
                }
                return response.text();
            })
            .then(html => {
                // Atualiza o preview
                previewContainer.innerHTML = html;
                
                // Remove o item do formul√°rio de edi√ß√£o
                const itemElement = document.querySelector(`[data-id="${itemId}"]`);
                if (itemElement) {
                    itemElement.remove();
                }
                
                // Atualiza os √≠ndices dos itens restantes
                atualizarIndices();
                
                showNotification('Item exclu√≠do com sucesso!', 'success');
            })
            .catch(error => {
                previewContainer.innerHTML = '<div class="error">‚ùå Erro ao excluir item</div>';
                showNotification('Erro ao excluir item: ' + error.message, 'error');
            });
        }

        function atualizarIndices() {
            // Atualiza os √≠ndices dos itens no formul√°rio
            const items = document.querySelectorAll('.oferta-edit-item');
            items.forEach((item, index) => {
                const indexElement = item.querySelector('.oferta-index');
                if (indexElement) {
                    indexElement.textContent = `#${index + 1}`;
                }
                
                // Atualiza os names dos inputs
                const inputs = item.querySelectorAll('input, select, textarea');
                inputs.forEach(input => {
                    if (input.name) {
                        input.name = input.name.replace(/ofertas\[\d+\]/, `ofertas[${index}]`);
                    }
                });
            });
        }

        function showNotification(message, type) {
            // Cria uma notifica√ß√£o simples
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 5px;
                color: white;
                font-weight: bold;
                z-index: 9999;
                animation: slideIn 0.3s ease;
            `;
            
            if (type === 'success') notification.style.backgroundColor = '#28a745';
            else if (type === 'error') notification.style.backgroundColor = '#dc3545';
            else if (type === 'info') notification.style.backgroundColor = '#17a2b8';
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Formata√ß√£o de pre√ßos
        document.addEventListener('input', function(e) {
            if (e.target.name && e.target.name.includes('PrecoString')) {
                // Remove caracteres n√£o num√©ricos exceto ponto e v√≠rgula
                let value = e.target.value.replace(/[^\d.,]/g, '');
                
                // Substitui v√≠rgula por ponto para padronizar
                value = value.replace(',', '.');
                
                // Garante que s√≥ h√° um ponto decimal
                const parts = value.split('.');
                if (parts.length > 2) {
                    value = parts[0] + '.' + parts.slice(1).join('');
                }
                
                // Limita a 2 casas decimais
                if (parts.length === 2 && parts[1].length > 2) {
                    value = parts[0] + '.' + parts[1].substring(0, 2);
                }
                
                e.target.value = value;
            }
        });

        // Auto-save das altera√ß√µes (opcional)
        let autoSaveTimeout;
        document.addEventListener('input', function(e) {
            if (e.target.matches('input[type="text"]')) {
                clearTimeout(autoSaveTimeout);
                autoSaveTimeout = setTimeout(() => {
                    // Auto-atualiza ap√≥s 2 segundos de inatividade
                    atualizarPreview();
                }, 2000);
            }
        });
    </script>
    
}
